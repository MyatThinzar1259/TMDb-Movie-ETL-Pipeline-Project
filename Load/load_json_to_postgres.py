import os
import json
from datetime import datetime
from sqlalchemy.orm import sessionmaker
from create_table_in_postgres import (
    engine,
    Movie, Genre, ProductionCompany, Director, Actor, DateDim,
    Fact, FactMovie, FactGenre, FactCompany, FactDirector, FactActor
)

# Setup session
Session = sessionmaker(bind=engine)

def load_json(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        return json.load(f)

def get_or_create(session, model, lookup_field, value, **kwargs):
    instance = session.query(model).filter(getattr(model, lookup_field) == value).one_or_none()
    if instance:
        return instance
    instance = model(**{lookup_field: value}, **kwargs)
    session.add(instance)
    session.flush()  # To get PK if autoincrement
    return instance

def load_dimensions(session):
    print("üöÄ Loading dimension tables...")

    # Movies
    for record in load_json("Data/json_to_load/movie.json"):
        session.merge(Movie(**record))

    # Genres
    for record in load_json("Data/json_to_load/genre.json"):
        session.merge(Genre(**record))

    # Production Companies
    for record in load_json("Data/json_to_load/production_company.json"):
        session.merge(ProductionCompany(**record))

    # Directors
    for record in load_json("Data/json_to_load/director.json"):
        session.merge(Director(**record))

    # Actors
    for record in load_json("Data/json_to_load/actor.json"):
        session.merge(Actor(**record))

    # Date Dimension
    for record in load_json("Data/json_to_load/date.json"):
        record["release_date"] = datetime.strptime(record["release_date"], "%Y-%m-%d").date()
        session.merge(DateDim(**record))

    session.commit()
    print("‚úÖ Dimension tables loaded successfully.")

def load_facts_and_links(session):
    print("üöÄ Loading fact and bridge tables...")

    fact_data = load_json("Data/star_json/fact.json")
    for row in fact_data:
        # Parse release_date
        release_date_obj = datetime.strptime(row["release_date"], "%Y-%m-%d").date()

        # Create fact record (exclude related list fields)
        fact = Fact(
            fact_id=row["fact_id"],
            tmdb_id=row["tmdb_id"],
            title=row["title"],
            budget=row.get("budget"),
            revenue=row.get("revenue"),
            rating=row.get("rating"),
            release_date=release_date_obj,
            original_language=row.get("original_language"),
            vote_count=row.get("vote_count"),
            runtime=row.get("runtime"),
            source=row.get("source")
        )
        session.add(fact)
        session.flush()  # get fact_id if autogenerated

        # Link Movie (dynamic get or create)
        movie = get_or_create(session, Movie, "tmdb_id", row["tmdb_id"], title=row.get("title"))
        session.add(FactMovie(fact_id=fact.fact_id, movie_id=movie.tmdb_id))

        # Production Companies (split string into list if necessary)
        companies = row.get("production_companies") or row.get("companies") or ""
        if isinstance(companies, str):
            companies = [c.strip() for c in companies.split(",") if c.strip()]
        for company_name in companies:
            company = get_or_create(session, ProductionCompany, "name", company_name)
            session.add(FactCompany(fact_id=fact.fact_id, company_id=company.company_id))

        # Genres
        genres = row.get("genres") or ""
        if isinstance(genres, str):
            genres = [g.strip() for g in genres.split(",") if g.strip()]
        for genre_name in genres:
            genre = get_or_create(session, Genre, "name", genre_name)
            session.add(FactGenre(fact_id=fact.fact_id, genre_id=genre.genre_id))

        # Directors
        directors = row.get("directors") or ""
        if isinstance(directors, str):
            directors = [d.strip() for d in directors.split(",") if d.strip()]
        for director_name in directors:
            director = get_or_create(session, Director, "name", director_name)
            session.add(FactDirector(fact_id=fact.fact_id, director_id=director.director_id))

        # Actors
        actors = row.get("actors") or ""
        if isinstance(actors, str):
            actors = [a.strip() for a in actors.split(",") if a.strip()]
        for actor_name in actors:
            actor = get_or_create(session, Actor, "name", actor_name)
            session.add(FactActor(fact_id=fact.fact_id, actor_id=actor.actor_id))

    session.commit()
    print("‚úÖ Fact and bridge tables loaded successfully.")

def print_table_counts(session):
    print("\nüìä Table row counts:")
    tables = {
        "movie": Movie,
        "production_company": ProductionCompany,
        "genre": Genre,
        "director": Director,
        "actor": Actor,
        "date_dim": DateDim,
        "fact": Fact,
        "fact_movie": FactMovie,
        "fact_company": FactCompany,
        "fact_genre": FactGenre,
        "fact_director": FactDirector,
        "fact_actor": FactActor
    }

    for name, model in tables.items():
        count = session.query(model).count()
        print(f"  {name}: {count} row(s)")
def main():
    session = Session()
    try:
        load_dimensions(session)
        load_facts_and_links(session)
        print_table_counts(session)
    except Exception as e:
        session.rollback()
        print(f"‚ùå Error during loading: {e}")
    finally:
        session.close()
        print("üì¶ Database session closed.")

if __name__ == "__main__":
    main()
